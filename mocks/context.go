// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ohmychat "github.com/guiflemes/ohmychat"
)

// MockSessionAdapter is a mock of SessionAdapter interface.
type MockSessionAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockSessionAdapterMockRecorder
}

// MockSessionAdapterMockRecorder is the mock recorder for MockSessionAdapter.
type MockSessionAdapterMockRecorder struct {
	mock *MockSessionAdapter
}

// NewMockSessionAdapter creates a new mock instance.
func NewMockSessionAdapter(ctrl *gomock.Controller) *MockSessionAdapter {
	mock := &MockSessionAdapter{ctrl: ctrl}
	mock.recorder = &MockSessionAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionAdapter) EXPECT() *MockSessionAdapterMockRecorder {
	return m.recorder
}

// GetOrCreate mocks base method.
func (m *MockSessionAdapter) GetOrCreate(ctx context.Context, sessionID string) (*ohmychat.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", ctx, sessionID)
	ret0, _ := ret[0].(*ohmychat.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockSessionAdapterMockRecorder) GetOrCreate(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockSessionAdapter)(nil).GetOrCreate), ctx, sessionID)
}

// Save mocks base method.
func (m *MockSessionAdapter) Save(ctx context.Context, session *ohmychat.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSessionAdapterMockRecorder) Save(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSessionAdapter)(nil).Save), ctx, session)
}
